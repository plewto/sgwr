(ns sgwr.indicators.dot-matrix
  "Defines displaybar cell in terms of 5x7 matrix"
  (:require [sgwr.indicators.cell])
  (:require [sgwr.util.color :as uc])
  (:require [sgwr.components.component :as components])
  (:require [sgwr.components.circle :as circle]))

(def ^:private rows 7)
(def ^:private columns 5)
(def ^:private dot-radius 2)
(def ^:private charmap* (atom {}))

(defn- dot-key [r c]
  (keyword (format "%d%d" r c)))

(defn- defrow [r cols]
  (let [acc* (atom [])]
    (dotimes [c (count cols)]
      (if (= (nth cols c) '*)
        (swap! acc* (fn [q](conj q (dot-key r c))))))
    @acc*))

;; Define dot-matrix character
;; chr - character key 
;; r0, r1, ... r6 - row vectors [. . . . . .]  . indicates off, * indicates on
;;
(defn defchar [chr r0 r1 r2 r3 r4 r5 r6]
  (let [acc (flatten (list (defrow 0 r0)
                           (defrow 1 r1)
                           (defrow 2 r2)
                           (defrow 3 r3)
                           (defrow 4 r4)
                           (defrow 5 r5)
                           (defrow 6 r6)))]
    (swap! charmap* (fn [q](assoc q chr acc)))))

(defchar (int \space)
  '[ . . . . . ]
  '[ . . . . . ]
  '[ . . . . . ]
  '[ . . . . . ]
  '[ . . . . . ]
  '[ . . . . . ]
  '[ . . . . . ])

(defchar (int \!)
  '[ . . * . . ]
  '[ . . * . . ]
  '[ . . * . . ]
  '[ . . * . . ]
  '[ . . . . . ]
  '[ . . * . . ]
  '[ . . * . . ])
    
(defchar (int \")
  '[ . * . * . ]
  '[ . * . * . ]
  '[ . * . * . ]
  '[ . . . . . ]
  '[ . . . . . ]
  '[ . . . . . ]
  '[ . . . . . ])
    
(defchar (int \#)
  '[ . * . * . ]
  '[ * * * * * ]
  '[ . * . * . ]
  '[ . * . * . ]
  '[ . * . * . ]
  '[ * * * * * ]
  '[ . * . * . ])
    
(defchar (int \$)
  '[ . . * . . ]
  '[ . * * * . ]
  '[ * . * . . ]
  '[ . * * * . ]
  '[ . . * . * ]
  '[ . * * * . ]
  '[ . . * . . ])
    
(defchar (int \%)
  '[ . * * . . ]
  '[ . * * . * ]
  '[ . . . * . ]
  '[ . . * . . ]
  '[ . * . . . ]
  '[ * . * * . ]
  '[ . . * * . ])
    
(defchar (int \&)
  '[ * * * . . ]
  '[ * . . . . ]
  '[ . * . . * ]
  '[ . * * . * ]
  '[ * . . * . ]
  '[ * . * . * ]
  '[ . * . . . ])
    
(defchar (int \')
  '[ . . * . . ]
  '[ . . * . . ]
  '[ . . * . . ]
  '[ . . . . . ]
  '[ . . . . . ]
  '[ . . . . . ]
  '[ . . . . . ])
    
(defchar (int \()
  '[ . . * . . ]
  '[ . * . . . ]
  '[ * . . . . ]
  '[ * . . . . ]
  '[ * . . . . ]
  '[ . * . . . ]
  '[ . . * . . ])
    
(defchar (int \))
  '[ . . * . . ]
  '[ . . . * . ]
  '[ . . . . * ]
  '[ . . . . * ]
  '[ . . . . * ]
  '[ . . . * . ]
  '[ . . * . . ])
    
(defchar (int \*)
  '[ . . * . . ]
  '[ * . * . * ]
  '[ . * * * . ]
  '[ . . * . . ]
  '[ . * * * . ]
  '[ * . * . * ]
  '[ . . * . . ])
    
(defchar (int \+)
  '[ . . . . . ]
  '[ . . * . . ]
  '[ . . * . . ]
  '[ * * * * * ]
  '[ . . * . . ]
  '[ . . * . . ]
  '[ . . . . . ])

(defchar (int \-)
  '[ . . . . . ]
  '[ . . . . . ]
  '[ . . . . . ]
  '[ * * * * * ]
  '[ . . . . . ]
  '[ . . . . . ]
  '[ . . . . . ])

(defchar (int \,)
  '[ . . . . . ]
  '[ . . . . . ]
  '[ . . . . . ]
  '[ . . . . . ]
  '[ . . . * . ]
  '[ . . . * . ]
  '[ . . * . . ])
    
(defchar (int \.)
  '[ . . . . . ]
  '[ . . . . . ]
  '[ . . . . . ]
  '[ . . . . . ]
  '[ . . . . . ]
  '[ . . * * . ]
  '[ . . * * . ])
    
(defchar (int \/)
  '[ . . . . . ]
  '[ . . . . * ]
  '[ . . . * . ]
  '[ . . * . . ]
  '[ . * . . . ]
  '[ * . . . . ]
  '[ . . . . . ])
    
(defchar (int \0)
  '[ . * * * . ]
  '[ * . . . * ]
  '[ * . . * * ]
  '[ * . * . * ]
  '[ * * . . * ]
  '[ * . . . * ]
  '[ . * * * . ])
    
(defchar (int \1)
  '[ . . * . . ]
  '[ . * * . . ]
  '[ . . * . . ]
  '[ . . * . . ]
  '[ . . * . . ]
  '[ . . * . . ]
  '[ . * * * . ])
    
(defchar (int \2)
  '[ . * * * . ]
  '[ * . . . * ]
  '[ . . . . * ]
  '[ . . * * . ]
  '[ . * . . . ]
  '[ * . . . . ]
  '[ * * * * * ])
    
(defchar (int \3)
  '[ . * * * . ]
  '[ * . . . * ]
  '[ . . . . * ]
  '[ . . * * . ]
  '[ . . . . * ]
  '[ * . . . * ]
  '[ . * * * . ])
    
(defchar (int \4)
  '[ . . . * . ]
  '[ . . * * . ]
  '[ . * . * . ]
  '[ * . . * . ]
  '[ * * * * * ]
  '[ . . . * . ]
  '[ . . . * . ])
    
(defchar (int \5)
  '[ * * * * * ]
  '[ * . . . . ]
  '[ * * * * . ]
  '[ . . . . * ]
  '[ . . . . * ]
  '[ * . . . * ]
  '[ . * * * . ])
    
(defchar (int \6)
  '[ . . * * . ]
  '[ . * . . . ]
  '[ * . . . . ]
  '[ * * * * . ]
  '[ * . . . * ]
  '[ * . . . * ]
  '[ . * * * . ])
    
(defchar (int \7)
  '[ * * * * * ]
  '[ . . . . * ]
  '[ . . . * . ]
  '[ . . * . . ]
  '[ . * . . . ]
  '[ . * . . . ]
  '[ . * . . . ])
    
(defchar (int \8)
  '[ . * * * . ]
  '[ * . . . * ]
  '[ * . . . * ]
  '[ . * * * . ]
  '[ * . . . * ]
  '[ * . . . * ]
  '[ . * * * . ])
    
(defchar (int \9)
  '[ . * * * . ]
  '[ * . . . * ]
  '[ * . . . * ]
  '[ . * * * * ]
  '[ . . . . * ]
  '[ . . . * . ]
  '[ . * * . . ])
    
(defchar (int \:)
  '[ . . . . . ]
  '[ . . * * . ]
  '[ . . * * . ]
  '[ . . . . . ]
  '[ . . * * . ]
  '[ . . * * . ]
  '[ . . . . . ])
    
(defchar (int \;)
  '[ . . . . . ]
  '[ . . * * . ]
  '[ . . * * . ]
  '[ . . . . . ]
  '[ . . * * . ]
  '[ . * * . . ]
  '[ . . . . . ])
    
(defchar (int \<)
  '[ . . . * . ]
  '[ . . * . . ]
  '[ . * . . . ]
  '[ * . . . . ]
  '[ . * . . . ]
  '[ . . * . . ]
  '[ . . . * . ])
    
(defchar (int \=)
  '[ . . . . . ]
  '[ . . . . . ]
  '[ * * * * * ]
  '[ . . . . . ]
  '[ * * * * * ]
  '[ . . . . . ]
  '[ . . . . . ])
    
(defchar (int \>)
  '[ . * . . . ]
  '[ . . * . . ]
  '[ . . . * . ]
  '[ . . . . * ]
  '[ . . . * . ]
  '[ . . * . . ]
  '[ . * . . . ])
    
(defchar (int \?)
  '[ . * * * . ]
  '[ * . . . * ]
  '[ . . . . * ]
  '[ . . . * . ]
  '[ . . * . . ]
  '[ . . . . . ]
  '[ . . * . . ])
    
(defchar (int \@)
  '[ . * * * . ]
  '[ * . * * * ]
  '[ * * . . * ]
  '[ * * . . * ]
  '[ * * . . * ]
  '[ * . * * . ]
  '[ . * . . . ])
    
(defchar (int \A)
  '[ . * * * . ]
  '[ * . . . * ]
  '[ * . . . * ]
  '[ * . . . * ]
  '[ * * * * * ]
  '[ * . . . * ]
  '[ * . . . * ])
    
(defchar (int \B)
  '[ * * * * . ]
  '[ * . . . * ]
  '[ * . . . * ]
  '[ * * * * . ]
  '[ * . . . * ]
  '[ * . . . * ]
  '[ * * * * . ])
    
(defchar (int \C)
  '[ . * * * . ]
  '[ * . . . * ]
  '[ * . . . . ]
  '[ * . . . . ]
  '[ * . . . . ]
  '[ * . . . * ]
  '[ . * * * . ])
    
(defchar (int \D)
  '[ * * * . . ]
  '[ * . . * . ]
  '[ * . . . * ]
  '[ * . . . * ]
  '[ * . . . * ]
  '[ * . . * . ]
  '[ * * * . . ])
    
(defchar (int \E)
  '[ * * * * * ]
  '[ * . . . . ]
  '[ * . . . . ]
  '[ * * * * . ]
  '[ * . . . . ]
  '[ * . . . . ]
  '[ * * * * * ])
    
(defchar (int \F)
  '[ * * * * * ]
  '[ * . . . . ]
  '[ * . . . . ]
  '[ * * * * . ]
  '[ * . . . . ]
  '[ * . . . . ]
  '[ * . . . . ])
    
(defchar (int \G)
  '[ . * * * . ]
  '[ * . . . * ]
  '[ * . . . . ]
  '[ * . * * * ]
  '[ * . . . * ]
  '[ * . . . * ]
  '[ . * * * . ])
    
(defchar (int \H)
  '[ * . . . * ]
  '[ * . . . * ]
  '[ * . . . * ]
  '[ * * * * * ]
  '[ * . . . * ]
  '[ * . . . * ]
  '[ * . . . * ])
    
(defchar (int \I)
  '[ . * * * . ]
  '[ . . * . . ]
  '[ . . * . . ]
  '[ . . * . . ]
  '[ . . * . . ]
  '[ . . * . . ]
  '[ . * * * . ])
    
(defchar (int \J)
  '[ . . * * * ]
  '[ . . . * . ]
  '[ . . . * . ]
  '[ . . . * . ]
  '[ * . . * . ]
  '[ * . . * . ]
  '[ . * * . . ])
    
(defchar (int \K)
  '[ * . . . * ]
  '[ * . . * . ]
  '[ * . * . . ]
  '[ * * . . . ]
  '[ * . * . . ]
  '[ * . . * . ]
  '[ * . . . * ])
    
(defchar (int \L)
  '[ * . . . . ]
  '[ * . . . . ]
  '[ * . . . . ]
  '[ * . . . . ]
  '[ * . . . . ]
  '[ * . . . . ]
  '[ * * * * * ])
    
(defchar (int \M)
  '[ * . . . * ]
  '[ * * . * * ]
  '[ * . * . * ]
  '[ * . * . * ]
  '[ * . . . * ]
  '[ * . . . * ]
  '[ * . . . * ])
    
(defchar (int \N)
  '[ * . . . * ]
  '[ * . . . * ]
  '[ * * . . * ]
  '[ * . * . * ]
  '[ * . . * * ]
  '[ * . . . * ]
  '[ * . . . * ])
    
(defchar (int \O)
  '[ . * * * . ]
  '[ * . . . * ]
  '[ * . . . * ]
  '[ * . . . * ]
  '[ * . . . * ]
  '[ * . . . * ]
  '[ . * * * . ])
    
(defchar (int \P)
  '[ * * * * . ]
  '[ * . . . * ]
  '[ * . . . * ]
  '[ * * * * . ]
  '[ * . . . . ]
  '[ * . . . . ]
  '[ * . . . . ])
    
(defchar (int \Q)
  '[ . * * * . ]
  '[ * . . . * ]
  '[ * . . . * ]
  '[ * . . . * ]
  '[ * . * . * ]
  '[ . * * * . ]
  '[ . . . . * ])
    
(defchar (int \R)
  '[ * * * * . ]
  '[ * . . . * ]
  '[ * . . . * ]
  '[ * * * * . ]
  '[ * . * . . ]
  '[ * . . * . ]
  '[ * . . . * ])
    
(defchar (int \S)
  '[ . * * * . ]
  '[ * . . . * ]
  '[ * . . . . ]
  '[ . * * * . ]
  '[ . . . . * ]
  '[ * . . . * ]
  '[ . * * * . ])
    
(defchar (int \T)
  '[ * * * * * ]
  '[ . . * . . ]
  '[ . . * . . ]
  '[ . . * . . ]
  '[ . . * . . ]
  '[ . . * . . ]
  '[ . . * . . ])
    
(defchar (int \U)
  '[ * . . . * ]
  '[ * . . . * ]
  '[ * . . . * ]
  '[ * . . . * ]
  '[ * . . . * ]
  '[ * . . . * ]
  '[ . * * * . ])
    
(defchar (int \V)
  '[ * . . . * ]
  '[ * . . . * ]
  '[ * . . . * ]
  '[ * . . . * ]
  '[ * . . . * ]
  '[ . * . * . ]
  '[ . . * . . ])
    
(defchar (int \W)
  '[ * . . . * ]
  '[ * . . . * ]
  '[ * . . . * ]
  '[ * . * . * ]
  '[ * . * . * ]
  '[ * . * . * ]
  '[ . * . * . ])
    
(defchar (int \X)
  '[ * . . . * ]
  '[ * . . . * ]
  '[ . * . * . ]
  '[ . . * . . ]
  '[ . * . * . ]
  '[ * . . . * ]
  '[ * . . . * ])
    
(defchar (int \Y)
  '[ * . . . * ]
  '[ * . . . * ]
  '[ * . . . * ]
  '[ . * . * . ]
  '[ . . * . . ]
  '[ . . * . . ]
  '[ . . * . . ])
    
(defchar (int \Z)
  '[ * * * * * ]
  '[ . . . . * ]
  '[ . . . * . ]
  '[ . . * . . ]
  '[ . * . . . ]
  '[ * . . . . ]
  '[ * * * * * ])
    
(defchar (int \[)
  '[ * * . . . ]
  '[ * . . . . ]
  '[ * . . . . ]
  '[ * . . . . ]
  '[ * . . . . ]
  '[ * . . . . ]
  '[ * * . . . ])
    
(defchar (int \\)
  '[ . . . . . ]
  '[ * . . . . ]
  '[ . * . . . ]
  '[ . . * . . ]
  '[ . . . * . ]
  '[ . . . . * ]
  '[ . . . . . ])
    
(defchar (int \])
  '[ . . . * * ]
  '[ . . . . * ]
  '[ . . . . * ]
  '[ . . . . * ]
  '[ . . . . * ]
  '[ . . . . * ]
  '[ . . . * * ])
    
(defchar (int \^)
  '[ . . * . . ]
  '[ . * . * . ]
  '[ * . . . * ]
  '[ . . . . . ]
  '[ . . . . . ]
  '[ . . . . . ]
  '[ . . . . . ])
    
(defchar (int \_)
  '[ . . . . . ]
  '[ . . . . . ]
  '[ . . . . . ]
  '[ . . . . . ]
  '[ . . . . . ]
  '[ . . . . . ]
  '[ * * * * * ])
    
(defchar (int \{)
  '[ . . * * . ]
  '[ . * . . . ]
  '[ . * . . . ]
  '[ * * . . . ]
  '[ . * . . . ]
  '[ . * . . . ]
  '[ . . * * . ])
    
(defchar (int \|)
  '[ . . * . . ]
  '[ . . * . . ]
  '[ . . * . . ]
  '[ . . . . . ]
  '[ . . * . . ]
  '[ . . * . . ]
  '[ . . * . . ])
    
(defchar (int \})
  '[ . * * . . ]
  '[ . . . * . ]
  '[ . . . * . ]
  '[ . . . * * ]
  '[ . . . * . ]
  '[ . . . * . ]
  '[ . * * . . ])
    
(defchar (int \~)
  '[ . . . . . ]
  '[ . * . . . ]
  '[ * . * . * ]
  '[ . . . * . ]
  '[ . . . . . ]
  '[ . . . . . ]
  '[ . . . . . ])


(defchar (int \a)
  '[ . . . . . ]
  '[ . . . . . ]
  '[ . . * * . ]
  '[ . . . * . ]
  '[ * * * * . ]
  '[ * . . * . ]
  '[ . * * . * ])

(defchar (int \b)
  '[ . . . . . ]
  '[ * . . . . ]
  '[ * . . . . ]
  '[ * * * . . ]
  '[ * . . * . ]
  '[ * . . * . ]
  '[ * * * . . ])

(defchar (int \c)
  '[ . . . . . ]
  '[ . . . . . ]
  '[ . * * . . ]
  '[ * . . . . ]
  '[ * . . . . ]
  '[ * . . . . ]
  '[ . * * . . ])

(defchar (int \d)
  '[ . . . . . ]
  '[ . . . * . ]
  '[ . . . * . ]
  '[ . * * * . ]
  '[ * . . * . ]
  '[ * . . * . ]
  '[ . * * * . ])

(defchar (int \e)
  '[ . . . . . ]
  '[ . . . . . ]
  '[ . * * . . ]
  '[ * . . * . ]
  '[ * * * * . ]
  '[ * . . . . ]
  '[ . * * . . ])

(defchar (int \f)
  '[ . . . . . ]
  '[ . . . . . ]
  '[ . * * . . ]
  '[ . * . . . ]
  '[ * * * . . ]
  '[ . * . . . ]
  '[ . * . . . ])

(defchar (int \g )
  '[ . . . . . ]
  '[ . . . . . ]
  '[ . * * . . ]
  '[ * . . * . ]
  '[ * * * * . ]
  '[ . . . * . ]
  '[ . * * . . ])

(defchar (int \h)
  '[ . . . . . ]
  '[ * . . . . ]
  '[ * . . . . ]
  '[ * * * . . ]
  '[ * . . * . ]
  '[ * . . * . ]
  '[ * . . * . ])

(defchar (int \i)
  '[ . . . . . ]
  '[ . . * . . ]
  '[ . . . . . ]
  '[ . . * . . ]
  '[ . . * . . ]
  '[ . . * . . ]
  '[ . . * . . ])

(defchar (int \j)
  '[ . . . . . ]
  '[ . . * . . ]
  '[ . . . . . ]
  '[ . . * . . ]
  '[ . . * . . ]
  '[ * . * . . ]
  '[ . * . . . ])

(defchar (int \k)
  '[ . . . . . ]
  '[ * . . * . ]
  '[ * . * . . ]
  '[ * * . . . ]
  '[ * * . . . ]
  '[ * . * . . ]
  '[ * . . * . ])

(defchar (int \l)
  '[ . . . . . ]
  '[ . . * . . ]
  '[ . . * . . ]
  '[ . . * . . ]
  '[ . . * . . ]
  '[ . . * . . ]
  '[ . . * * . ])


(defchar (int \m)
  '[ . . . . . ]
  '[ . . . . . ]
  '[ . * . * . ]
  '[ * . * . * ]
  '[ * . * . * ]
  '[ * . * . * ]
  '[ * . * . * ])

(defchar (int \n)
  '[ . . . . . ]
  '[ . . . . . ]
  '[ . * * . . ]
  '[ * . . * . ]
  '[ * . . * . ]
  '[ * . . * . ]
  '[ * . . * . ])
      

(defchar (int \o)
  '[ . . . . . ]
  '[ . . . . . ]
  '[ . * * . . ]
  '[ * . . * . ]
  '[ * . . * . ]
  '[ * . . * . ]
  '[ . * * . . ])

(defchar (int \p)
  '[ . . . . . ]
  '[ . . . . . ]
  '[ . * * . . ]
  '[ . * . * . ]
  '[ . * * . . ]
  '[ . * . . . ]
  '[ . * . . . ])

(defchar (int \q)
  '[ . . . . . ]
  '[ . . . . . ]
  '[ . . * * . ]
  '[ . * . * . ]
  '[ . . * * . ]
  '[ . . . * . ]
  '[ . . . * . ])

(defchar (int \r)
  '[ . . . . . ]
  '[ . . . . . ]
  '[ * . * * . ]
  '[ * * . . . ]
  '[ * . . . . ]
  '[ * . . . . ]
  '[ * . . . . ])

(defchar (int \s)
  '[ . . . . . ]
  '[ . . . . . ]
  '[ . * * * . ]
  '[ * . . . . ]
  '[ . * * * . ]
  '[ . . . . * ]
  '[ . * * * . ])

(defchar (int \t)
  '[ . . . . . ]
  '[ . . . . . ]
  '[ . . * . . ]
  '[ . * * * . ]
  '[ . . * . . ]
  '[ . . * . . ]
  '[ . . * . . ])

(defchar (int \u)
  '[ . . . . . ]
  '[ . . . . . ]
  '[ * . . * . ]
  '[ * . . * . ]
  '[ * . . * . ]
  '[ * . . * . ]
  '[ . * * . . ])

(defchar (int \v)
  '[ . . . . . ]
  '[ . . . . . ]
  '[ . * . * . ]
  '[ . * . * . ]
  '[ . * . * . ]
  '[ . * . * . ]
  '[ . . * . . ])

(defchar (int \w)
  '[ . . . . . ]
  '[ . . . . . ]
  '[ * . . . * ]
  '[ * . * . * ]
  '[ * . * . * ]
  '[ * . * . * ]
  '[ . * . * . ])

(defchar (int \x)
  '[ . . . . . ]
  '[ . . . . . ]
  '[ . . . . . ]
  '[ * . . * . ]
  '[ . * * . . ]
  '[ . * * . . ]
  '[ * . . * . ])

(defchar (int \y)
  '[ . . . . . ]
  '[ . . . . . ]
  '[ * . . * . ]
  '[ . * . * . ]
  '[ . . * . . ]
  '[ . * . . . ]
  '[ * . . . . ])

(defchar (int \z)
  '[ . . . . . ]
  '[ . . . . . ]
  '[ * * * . . ]
  '[ . . * . . ]
  '[ . * . . . ]
  '[ * . . . . ]
  '[ * * * . . ])
   
(defchar 256
  '[ * * * * * ]
  '[ . . . . . ]
  '[ . . . . . ]
  '[ . . . . . ]
  '[ . . . . . ]
  '[ . . . . . ]
  '[ . . . . . ])

(defchar 257
  '[ * . . . . ]
  '[ * . . . . ]
  '[ * . . . . ]
  '[ * . . . . ]
  '[ * . . . . ]
  '[ * . . . . ]
  '[ * . . . . ])

(defchar 258
  '[ . . . . . ]
  '[ . . . . . ]
  '[ . . . . . ]
  '[ . . . . . ]
  '[ . . . . . ]
  '[ . . . . . ]
  '[ * * * * * ])

(defchar 259
  '[ . . . . * ]
  '[ . . . . * ]
  '[ . . . . * ]
  '[ . . . . * ]
  '[ . . . . * ]
  '[ . . . . * ]
  '[ . . . . * ])

(defchar 260
  '[ . . * . . ]
  '[ . . * . . ]
  '[ . . * . . ]
  '[ . . * . . ]
  '[ . . * . . ]
  '[ . . * . . ]
  '[ . . * . . ])

(defchar 261
  '[ . . . . . ]
  '[ . . . . . ]
  '[ . . . . . ]
  '[ * * * * * ]
  '[ . . . . . ]
  '[ . . . . . ]
  '[ . . . . . ])

(defchar 262
  '[ . . . . . ]
  '[ . . . . . ]
  '[ . . . . . ]
  '[ * * * * * ]
  '[ * . . . . ]
  '[ * . . . . ]
  '[ * . . . . ])

(defchar 263
  '[ . . . . . ]
  '[ . . . . . ]
  '[ . . . . . ]
  '[ * . . . . ]
  '[ * . . . . ]
  '[ * . . . . ]
  '[ * * * * * ])

(defchar 263
  '[ . . . . . ]
  '[ . . . . . ]
  '[ . . . . . ]
  '[ . . . . * ]
  '[ . . . . * ]
  '[ . . . . * ]
  '[ * * * * * ])

(defchar 264
  '[ . . . . . ]
  '[ . . . . . ]
  '[ . . . . . ]
  '[ * * * * * ]
  '[ . . . . * ]
  '[ . . . . * ]
  '[ . . . . * ])

(defchar 265
  '[ * . . . . ]
  '[ * . . . . ]
  '[ * . . . . ]
  '[ * * * * * ]
  '[ . . . . * ]
  '[ . . . . * ]
  '[ . . . . * ])

(defchar 266
  '[ . . . . * ]
  '[ . . . . * ]
  '[ . . . . * ]
  '[ * * * * * ]
  '[ * . . . . ]
  '[ * . . . . ]
  '[ * . . . . ])

(defchar 267
  '[ * * * * * ]
  '[ * . . . . ]
  '[ * . . . . ]
  '[ * . . . . ]
  '[ * . . . . ]
  '[ * . . . . ]
  '[ * . . . . ])

(defchar 268
  '[ * . . . . ]
  '[ * . . . . ]
  '[ * . . . . ]
  '[ * . . . . ]
  '[ * . . . . ]
  '[ * . . . . ]
  '[ * * * * * ])

(defchar 269
  '[ . . . . * ]
  '[ . . . . * ]
  '[ . . . . * ]
  '[ . . . . * ]
  '[ . . . . * ]
  '[ . . . . * ]
  '[ * * * * * ])

(defchar 270
  '[ * * * * * ]
  '[ . . . . * ]
  '[ . . . . * ]
  '[ . . . . * ]
  '[ . . . . * ]
  '[ . . . . * ]
  '[ . . . . * ])

(defchar 271
  '[ * * * * * ]
  '[ . . * . . ]
  '[ . . * . . ]
  '[ . . * . . ]
  '[ . . * . . ]
  '[ . . * . . ]
  '[ . . * . . ])

(defchar 272
  '[ * . . . . ]
  '[ * . . . . ]
  '[ * . . . . ]
  '[ * * * * * ]
  '[ * . . . . ]
  '[ * . . . . ]
  '[ * . . . . ])

(defchar 273
  '[ . . * . . ]
  '[ . . * . . ]
  '[ . . * . . ]
  '[ . . * . . ]
  '[ . . * . . ]
  '[ . . * . . ]
  '[ * * * * * ])

(defchar 274
  '[ . . . . * ]
  '[ . . . . * ]
  '[ . . . . * ]
  '[ * * * * * ]
  '[ . . . . * ]
  '[ . . . . * ]
  '[ . . . . * ])

(defchar 275
  '[ . . * . . ]
  '[ . . * . . ]
  '[ . . * . . ]
  '[ * * * * * ]
  '[ . . * . . ]
  '[ . . * . . ]
  '[ . . * . . ])

(defchar 276
  '[ * . . . . ]
  '[ * . . . . ]
  '[ . * . . . ]
  '[ . . * . . ]
  '[ . . . * . ]
  '[ . . . . * ]
  '[ . . . . * ])

(defchar 277
  '[ . . . . * ]
  '[ . . . . * ]
  '[ . . . * . ]
  '[ . . * . . ]
  '[ . * . . . ]
  '[ * . . . . ]
  '[ * . . . . ])

(defchar 278
  '[ * . . . * ]
  '[ * . . . * ]
  '[ . * . * . ]
  '[ . . * . . ]
  '[ . * . * . ]
  '[ * . . . * ]
  '[ * . . . * ])

(defchar 279
  '[ . . * . . ]
  '[ . * . * . ]
  '[ * . * . * ]
  '[ . . * . . ]
  '[ . . * . . ]
  '[ . . * . . ]
  '[ . . . . . ])

(defchar 280
  '[ . . . . . ]
  '[ . . * . . ]
  '[ . . * . . ]
  '[ . . * . . ]
  '[ * . * . * ]
  '[ . * . * . ]
  '[ . . * . . ])

(defchar 281
  '[ . . . . . ]
  '[ . . * . . ]
  '[ . * . . . ]
  '[ * . * * * ]
  '[ . * . . . ]
  '[ . . * . . ]
  '[ . . . . . ])

(defchar 282
  '[ . . . . . ]
  '[ . . * . . ]
  '[ . . . * . ]
  '[ * * * . * ]
  '[ . . . * . ]
  '[ . . * . . ]
  '[ . . . . . ])


(defchar 283
  '[ * * * * * ]
  '[ * . . . * ]
  '[ * . . . * ]
  '[ * . . . * ]
  '[ * . . . * ]
  '[ * . . . * ]
  '[ * * * * * ])

(defchar 284
  '[ . . . . . ]
  '[ * * * * * ]
  '[ * . . . * ]
  '[ * . . . * ]
  '[ * . . . * ]
  '[ * * * * * ]
  '[ . . . . . ])

(defchar 285
  '[ . . . . . ]
  '[ . . . . . ]
  '[ . * * * . ]
  '[ . * . * . ]
  '[ . * . * . ]
  '[ . * * * . ]
  '[ . . . . . ])

(defchar 286
  '[ . . . . . ]
  '[ . . . . . ]
  '[ . * * * . ]
  '[ . * . * . ]
  '[ . * * * . ]
  '[ . . . . . ]
  '[ . . . . . ])


(defchar 287
  '[ * * * * * ]
  '[ * * * * * ]
  '[ * * * * * ]
  '[ * * * * * ]
  '[ * * * * * ]
  '[ * * * * * ]
  '[ * * * * * ])

(defchar 288
  '[ . . . . . ]
  '[ . * * * . ]
  '[ . * * * . ]
  '[ . * * * . ]
  '[ . * * * . ]
  '[ . * * * . ]
  '[ . . . . . ])

(defchar 289
  '[ . . . . . ]
  '[ . . . . . ]
  '[ . * * * . ]
  '[ . * * * . ]
  '[ . * * * . ]
  '[ . . . . . ]
  '[ . . . . . ])

(defchar 290
  '[ * . * . * ]
  '[ * . * . * ]
  '[ * . * . * ]
  '[ * . * . * ]
  '[ * . * . * ]
  '[ * . * . * ]
  '[ * . * . * ])

(defchar 291
  '[ * * * * * ]
  '[ . . . . . ]
  '[ * * * * * ]
  '[ . . . . . ]
  '[ * * * * * ]
  '[ . . . . . ]
  '[ * * * * * ])

(defchar 292
  '[ * . * . * ]
  '[ . * . * . ]
  '[ * . * . * ]
  '[ . * . * . ]
  '[ * . * . * ]
  '[ . * . * . ]
  '[ * . * . * ])

(defchar 293 
  '[ . * . . . ]
  '[ * . * . . ]
  '[ . * . * . ]
  '[ . . * . * ]
  '[ . * . * . ]
  '[ * . * . . ]
  '[ . * . . . ])

(defchar 294
  '[ . . . * . ]
  '[ . . * . * ]
  '[ . * . * . ]
  '[ * . * . . ]
  '[ . * . * . ]
  '[ . . * . * ]
  '[ . . . * . ])


(defn matrix-cell [grp x-offset y-offset & {:keys [cell-width cell-height]
                                            :or {cell-width 25
                                                 cell-height 35}}]
  (let [inactive* (atom (uc/color [32 32 32]))
        active* (atom (uc/color [255 64 64]))
        row-height (/ cell-height rows)
        column-width (/ cell-width columns)
        dots (let [acc* (atom {})]
               (dotimes [r rows]
                   (let [dy (int (+ y-offset (* r row-height)))]
                     (dotimes [c columns]
                       (let [dx (+ x-offset (* c column-width))
                             p (circle/circle-r grp [(int dx) (int dy)] dot-radius :fill true)]
                         (components/set-attributes! p :inactive :color @inactive* :fill true)
                         (components/set-attributes! p :active   :color @active*   :fill true)
                         (swap! acc* (fn [q](assoc q (dot-key r c) p)))))))
               @acc*)
        all-off (fn []
                  (doseq [p (vals dots)]
                    (.use-attributes! p :inactive)))
        obj (reify sgwr.indicators.cell/Cell

              (cell-width [this] cell-width)

              (cell-height [this] cell-height)

              (colors! [this inactive active]
                (let [c1 (uc/color inactive)
                      c2 (uc/color active)]
                  (reset! inactive* c1)
                  (reset! active* c2)
                  (doseq [p (vals dots)]
                    (components/set-attributes! p :inactive :color c1 :fill true)
                    (components/set-attributes! p :active   :color c2 :fill true))
                  [c1 c2]))

              (character-set [this]
                (keys (sort @charmap*)))

              (display! [this c]
                (all-off)
                (let [klst (get @charmap* (int c) [])]
                  (doseq [k klst]
                    (let [e (get dots k)]
                      (.use-attributes! e :active))))))]
    obj))
